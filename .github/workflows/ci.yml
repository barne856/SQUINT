name: SQUINT CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-test-linux:
    name: Build and Test (Linux)
    runs-on: ubuntu-latest
    strategy:
      matrix:
        compiler: [g++-12, clang++-17]
        stdlib: [libstdc++, libc++]
        blas_backend: [OpenBLAS, MKL]

    steps:
    - uses: actions/checkout@v4

    - name: Install compiler and libraries
      run: |
        sudo apt-get update
        sudo apt-get install -y ninja-build
        if [[ "${{ matrix.compiler }}" == clang++* ]]; then
          wget https://apt.llvm.org/llvm.sh
          chmod +x llvm.sh
          CLANG_VERSION=$(echo "${{ matrix.compiler }}" | sed 's/clang++-//')
          sudo ./llvm.sh $CLANG_VERSION
          sudo apt-get install -y clang-$CLANG_VERSION libc++-$CLANG_VERSION-dev libc++abi-$CLANG_VERSION-dev lld-$CLANG_VERSION gfortran gcc
        else
          sudo apt-get install -y ${{ matrix.compiler }} gfortran gcc
        fi
        if [[ "${{ matrix.blas_backend }}" == "OpenBLAS" ]]; then
          sudo apt-get install -y libopenblas-dev
        else
          sudo apt-get install -y intel-mkl
        fi

    - name: Configure CMake
      env:
        CXX: ${{ matrix.compiler }}
      run: |
        if [[ "${{ matrix.compiler }}" == clang++* ]] && [[ "${{ matrix.stdlib }}" == "libc++" ]]; then
          CLANG_VERSION=$(echo "${{ matrix.compiler }}" | sed 's/clang++-//')
          export CXXFLAGS="-stdlib=libc++ -nostdinc++ -I/usr/lib/llvm-$CLANG_VERSION/include/c++/v1"
          export LDFLAGS="-L/usr/lib/llvm-$CLANG_VERSION/lib"
        fi
        cmake -B ${{github.workspace}}/build -G Ninja -DSQUINT_BUILD_TESTS=ON -DCMAKE_CXX_COMPILER=${{ matrix.compiler }} -DCMAKE_CXX_FLAGS="$CXXFLAGS" -DBLAS_BACKEND=${{ matrix.blas_backend }}

    - name: Build
      run: cmake --build ${{github.workspace}}/build

    - name: Test
      working-directory: ${{github.workspace}}/build
      run: ctest -L SQUINT --output-on-failure

  build-and-test-windows:
    name: Build and Test (Windows)
    runs-on: windows-latest
    strategy:
      matrix:
        compiler: [clang++]
        stdlib: [libstdc++, libc++]
        blas_backend: [OpenBLAS, MKL]
    defaults:
      run:
        shell: pwsh

    steps:
    - uses: actions/checkout@v4

    - name: Install Ninja
      run: choco install ninja

    - name: Install LLVM and Clang
      uses: KyleMayes/install-llvm-action@v2
      with:
        version: "17.0"

    - name: Setup Miniconda
      uses: conda-incubator/setup-miniconda@v3
      with:
        auto-update-conda: true
        python-version: "3.11"
        channels: conda-forge

    - name: Install MKL
      if: matrix.blas_backend == 'MKL'
      run: |
        conda install -c https://software.repos.intel.com/python/conda/ -c conda-forge mkl mkl-devel

    - name: Install OpenBLAS dependencies
      if: matrix.blas_backend == 'OpenBLAS'
      run: |
        conda install -c conda-forge openblas
        choco install mingw

    - name: Configure CMake
      run: |
        $env:PATH = "$env:CONDA\Scripts;$env:PATH"
        if (${{ matrix.stdlib }} -eq 'libc++') {
          $CLANG_VERSION = ${{ matrix.compiler }} -replace 'clang\+\+', ''
          $env:CXXFLAGS = "-stdlib=libc++ -nostdinc++ -I${env:CONDA}\\Library\\lib\\clang\\$CLANG_VERSION\\include\\c++\\v1"
          $env:LDFLAGS = "-L${env:CONDA}\\Library\\lib"
        }
        $env:FC = "gfortran"
        cmake -B ${{github.workspace}}/build -G Ninja -DSQUINT_BUILD_TESTS=ON -DBLAS_BACKEND=${{ matrix.blas_backend }} -DCMAKE_CXX_COMPILER=clang++ -DCMAKE_CXX_FLAGS="$env:CXXFLAGS" -DCMAKE_Fortran_COMPILER=$env:FC

    - name: Build
      run: |
        $env:PATH = "$env:CONDA\Scripts;$env:PATH"
        cmake --build ${{github.workspace}}/build

    - name: Test
      working-directory: ${{github.workspace}}/build
      run: |
        $env:PATH = "$env:CONDA\Scripts;$env:PATH"
        ctest -L SQUINT --output-on-failure

  clang-tidy:
    name: Clang-Tidy
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Install Clang 17 and Clang-Tidy
      run: |
        wget https://apt.llvm.org/llvm.sh
        chmod +x llvm.sh
        sudo ./llvm.sh 17
        sudo apt-get install -y clang-17 libc++-17-dev libc++abi-17-dev lld-17 clang-tidy-17 ninja-build

    - name: Configure CMake
      env:
        CXX: clang++-17
      run: |
        export CXXFLAGS="-stdlib=libc++ -nostdinc++ -I/usr/lib/llvm-17/include/c++/v1"
        export LDFLAGS="-L/usr/lib/llvm-17/lib"
        cmake -B ${{github.workspace}}/build -G Ninja -DSQUINT_BUILD_TESTS=ON -DCMAKE_CXX_FLAGS="$CXXFLAGS" -DCMAKE_EXPORT_COMPILE_COMMANDS=ON

    - name: Build
      run: cmake --build ${{github.workspace}}/build

    - name: Run Clang-Tidy
      run: |
        find include -name '*.cpp' -or -name '*.hpp' | \
        xargs -P $(nproc) clang-tidy-17 -p build \
        --config-file=.clang-tidy

    - name: Check Clang-Tidy result
      run: |
        if [ $? -ne 0 ]; then
          echo "Clang-Tidy found issues. Please fix them before merging."
          exit 1
