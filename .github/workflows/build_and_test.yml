name: Build and Test

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        compiler: [gcc, clang, msvc]
        blas: [NONE, OpenBLAS, MKL]
        exclude:
          - os: windows-latest
            compiler: gcc
          - os: ubuntu-latest
            compiler: msvc

    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v3

    - name: Install dependencies (Ubuntu)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y cmake ninja-build
        if [ "${{ matrix.compiler }}" = "gcc" ]; then
          sudo apt-get install -y g++
        elif [ "${{ matrix.compiler }}" = "clang" ]; then
          sudo apt-get install -y clang clang-tidy
        fi
        if [ "${{ matrix.blas }}" = "OpenBLAS" ]; then
          sudo apt-get install -y libopenblas-dev
        elif [ "${{ matrix.blas }}" = "MKL" ]; then
          wget https://apt.repos.intel.com/intel-gpg-keys/GPG-PUB-KEY-INTEL-SW-PRODUCTS.PUB
          sudo apt-key add GPG-PUB-KEY-INTEL-SW-PRODUCTS.PUB
          echo "deb https://apt.repos.intel.com/oneapi all main" | sudo tee /etc/apt/sources.list.d/oneAPI.list
          sudo apt-get update
          sudo apt-get install -y intel-oneapi-mkl-devel
        fi

    - name: Install dependencies (Windows)
      if: runner.os == 'Windows'
      run: |
        choco install cmake ninja
        if ("${{ matrix.compiler }}" -eq "clang") {
          choco install llvm
        }
        if ("${{ matrix.blas }}" -eq "OpenBLAS") {
          choco install openblas
        } elseif ("${{ matrix.blas }}" -eq "MKL") {
          choco install intel-oneapi-mkl
        }

    - name: Configure CMake
      run: |
        if [ "${{ runner.os }}" = "Linux" ]; then
          if [ "${{ matrix.compiler }}" = "gcc" ]; then
            export CC=gcc
            export CXX=g++
          elif [ "${{ matrix.compiler }}" = "clang" ]; then
            export CC=clang
            export CXX=clang++
          fi
        elif [ "${{ runner.os }}" = "Windows" ]; then
          if [ "${{ matrix.compiler }}" = "clang" ]; then
            export CC=clang
            export CXX=clang++
          fi
        fi
        
        if [ "${{ matrix.blas }}" = "MKL" ] && [ "${{ runner.os }}" = "Linux" ]; then
          source /opt/intel/oneapi/setvars.sh
        fi
        
        cmake -B build -G Ninja -DCMAKE_BUILD_TYPE=Release -DSQUINT_BUILD_DOCUMENTATION=OFF -DSQUINT_BLAS_BACKEND=${{ matrix.blas }}
      shell: bash

    - name: Build
      run: cmake --build build
      
    - name: Test
      working-directory: build
      run: ctest --output-on-failure

    - name: Run Clang-Tidy
      if: matrix.compiler == 'clang' && runner.os == 'Linux'
      run: |
        find ./include/squint -name '*.cpp' -or -name '*.hpp' | \
        xargs -P $(nproc) clang-tidy -p build > clang_tidy_output.txt
        if [ -s clang_tidy_output.txt ]; then
          echo "Clang-Tidy found issues:"
          cat clang_tidy_output.txt
          exit 1
        else
          echo "Clang-Tidy passed without issues."
        fi
      shell: bash